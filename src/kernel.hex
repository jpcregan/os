0x0	; entry

	; register setup

	b8 00 00	; ax = 0x0
	b9 00 00	; cx = 0x0
	ba 00 00	; dx = 0x0
	bb 00 00	; bx = 0x0
	bd 00 00	; bp = 0x0
	be 00 00	; si = 0x0
	bf 00 00	; di = 0x0

	; segment register setup

	b8 00 00	; ax = 0x0
	8e c0		; es = ax
	8e d8		; ds = ax

	; stack setup

	; NOTE: A bug exists preventing SS from being set to 0x0 and SP to 0x1000 even though the effective address is the same.
	; This seems related to the SS interrupt issue found on early 8088 revisions, but using the disable interrupt flag as a workaround has no effect.
	; Changing to the 1982 revision in the 86Box emulator solves the issue, but for compatibility reasons SS is left at 0x80.
	; I will dump both BIOS revisions later to fully understand the issue.

	b8 80 00	; ax = 0x80
	8e c8		; ss = ax
	bc 00 08	; sp = 0x800

	; set screen mode

	b8 00 00	; ax = 0x0
	cd 10		; int 0x10

	; print string

	b8 00 01	; ax = 0x100
	8e d8		; ds = ax
	be 80 00	; si = 0x80

	9a 10 01 00 01	; call print string

	; load shell

	b0 01		; al = 0x1
	9a 00 02 00 01	; call load program

0x80	; string

	"Hello, World!" 0d 0a 00

0x100	; print char

	50		; push ax
	53		; push bx

	b4 0e		; ah = 0xe
	b7 00		; bh = 0x0

	cd 10		; int 0x10

	5b		; pop bx
	58		; pop ax

	cb		; return

0x110	; print string

	50		; push ax
	57		; push si

	; loop

	ac		; al = [ds:si++]

	3c 00		; cmp al - 0x0
	74 07		; je end

	9a 00 01 00 01	; call print char
	eb f4		; jmp loop

	; end

	5e		; pop si
	58		; pop ax

	cb		; return

0x200	; load program

	; track number in al
	; this function never returns to caller, so we can ignore saving registers

	b2 00		; dl = 0x0 (drive number)
	b6 00		; dh = 0x0 (head number)
	88 c5		; ch = al (track number)
	b1 01		; cl = 0x1 (sector number)
	b0 08		; al = 0x8 (number of sectors)

	bb 00 02	; bx = 0x200
	8e c3		; es = bx
	bb 00 00	; bx = 0x0

	b4 02		; ah = 0x2
	cd 13		; int 0x13

	9a 00 00 00 02	; call program

	; reset system

	ea 00 00 00 01	; jump 0x100:0x0

0xd00	; end
